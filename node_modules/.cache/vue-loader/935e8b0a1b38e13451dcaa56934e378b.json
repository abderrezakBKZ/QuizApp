{"remainingRequest":"C:\\Users\\Abderrezak\\quiz2\\project_quiz\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Abderrezak\\quiz2\\project_quiz\\src\\components\\QuestionBox.vue?vue&type=style&index=0&id=62ab2b85&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Abderrezak\\quiz2\\project_quiz\\src\\components\\QuestionBox.vue","mtime":1609188120917},{"path":"C:\\Users\\Abderrezak\\quiz2\\project_quiz\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Abderrezak\\quiz2\\project_quiz\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Abderrezak\\quiz2\\project_quiz\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Abderrezak\\quiz2\\project_quiz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Abderrezak\\quiz2\\project_quiz\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQoubGlzdC1ncm91cCB7DQogICAgbWFyZ2luLWJvdHRvbSA6IDE1cHg7DQp9DQoubGlzdC1ncm91cC1pdGVtOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kOiAgI0VFRTsNCiAgICBjdXJzb3IgOiBwb2ludGVyIDsNCn0NCi5idG4gew0KICAgIG1hcmdpbiA6IDAgNXB4Ow0KfQ0KDQouc2VsZWN0ZWQgew0KICAgIGJhY2tncm91bmQtY29sb3IgOiBsaWdodGJsdWUgOw0KfQ0KDQouY29ycmVjdCB7DQogICAgYmFja2dyb3VuZC1jb2xvciA6IGxpZ2h0Z3JlZW4gOw0KfQ0KLmluY29ycmVjdCB7DQogICAgYmFja2dyb3VuZC1jb2xvciA6IHJlZCA7DQp9DQoNCg=="},{"version":3,"sources":["QuestionBox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"QuestionBox.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n<div>\r\n  <b-jumbotron >\r\n    <template #header></template>\r\n\r\n    <template #lead>\r\n      {{currentQuestion.question}}\r\n    </template>\r\n\r\n    <hr class=\"my-4\">\r\n\r\n            <b-list-group>\r\n            \r\n                <b-list-group-item v-for=\"(answer,index) in shuffledAnswers\" :key=\"index\" @click=\"selectAnswer(index)\"\r\n                :class=\" answerClass (index)\">\r\n                 {{answer}} \r\n                 \r\n                </b-list-group-item>\r\n            </b-list-group>\r\n    \r\n\r\n    <b-button variant=\"primary\" @click ='submitAnswer' :disabled =\"selectedIndex===null || answered\" >\r\n    Submit</b-button>\r\n    <b-button @click=\"next\" variant=\"success\" href=\"#\" v-if ='unlock' >Next</b-button>\r\n  </b-jumbotron>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport _ from 'lodash'\r\nexport default {\r\n    props : {\r\n        currentQuestion : Object,\r\n        next : Function,\r\n        increment: Function\r\n        \r\n    },\r\n    \r\nwatch : {\r\n    currentQuestion: {\r\n        immediate: true ,\r\n        handler () {\r\n            this.selectedIndex = null\r\n            this.shuffleAnswers () ;\r\n            this.answered = false; \r\n            this.unlock = false  \r\n\r\n        }\r\n    }\r\n},\r\n\r\n\r\n\r\n\r\n    data () {\r\n        return {\r\n            selectedIndex: null,\r\n            shuffledAnswers : [],\r\n            answered : false ,\r\n            unlock : false\r\n        }\r\n    },\r\nmethods: {\r\n    selectAnswer (index) {\r\n        this.selectedIndex = index\r\n        \r\n\r\n    },\r\n    answerClass (index) {\r\n        let answerClass = ''\r\n\r\n        if  (!this.answered && this.selectedIndex === index) {\r\n            answerClass = 'selected'\r\n        }\r\n        else if (this.answered && this.correctIndex === index) {\r\n            answerClass = 'correct' \r\n        }\r\n        else if (this.answered && this.selectedIndex === index && this.correctIndex !== index ) {\r\n            answerClass = 'incorrect'\r\n        } \r\n        return answerClass\r\n    },\r\n    shuffleAnswers () {\r\n        let answers = [...this.currentQuestion.incorrect_answers,this.currentQuestion.correct_answer]\r\n        this.shuffledAnswers = _.shuffle (answers)\r\n        this.correctIndex = this.shuffledAnswers.indexOf(this.currentQuestion.correct_answer)\r\n    },\r\n\r\n    submitAnswer() {\r\n      let isCorrect = false\r\n      if (this.selectedIndex === this.correctIndex ) {\r\n        isCorrect = true\r\n      }\r\n      this.answered = true\r\n      this.increment(isCorrect)\r\n      this.unlock = true\r\n    },\r\n\r\n},\r\n\r\n\r\n\r\n    computed: {\r\n    answers () {\r\n       let answers = [...this.currentQuestion.incorrect_answers]\r\n        answers.push (this.currentQuestion.correct_answer)\r\n        return answers\r\n       \r\n     }\r\n}\r\n}\r\n\r\n\r\n\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.list-group {\r\n    margin-bottom : 15px;\r\n}\r\n.list-group-item:hover {\r\n    background:  #EEE;\r\n    cursor : pointer ;\r\n}\r\n.btn {\r\n    margin : 0 5px;\r\n}\r\n\r\n.selected {\r\n    background-color : lightblue ;\r\n}\r\n\r\n.correct {\r\n    background-color : lightgreen ;\r\n}\r\n.incorrect {\r\n    background-color : red ;\r\n}\r\n\r\n</style>"]}]}