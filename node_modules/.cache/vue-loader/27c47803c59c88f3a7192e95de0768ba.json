{"remainingRequest":"C:\\Users\\Abderrezak\\Desktop\\FirstVueApp-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Abderrezak\\Desktop\\FirstVueApp-master\\src\\components\\QuestionBox.vue?vue&type=style&index=0&id=62ab2b85&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Abderrezak\\Desktop\\FirstVueApp-master\\src\\components\\QuestionBox.vue","mtime":1609179636000},{"path":"C:\\Users\\Abderrezak\\Desktop\\FirstVueApp-master\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Abderrezak\\Desktop\\FirstVueApp-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Abderrezak\\Desktop\\FirstVueApp-master\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Abderrezak\\Desktop\\FirstVueApp-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Abderrezak\\Desktop\\FirstVueApp-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5saXN0LWdyb3VwIHsKICAgIG1hcmdpbi1ib3R0b20gOiAxNXB4Owp9Ci5saXN0LWdyb3VwLWl0ZW06aG92ZXIgewogICAgYmFja2dyb3VuZDogICNFRUU7CiAgICBjdXJzb3IgOiBwb2ludGVyIDsKfQouYnRuIHsKICAgIG1hcmdpbiA6IDAgNXB4Owp9Cgouc2VsZWN0ZWQgewogICAgYmFja2dyb3VuZC1jb2xvciA6IGxpZ2h0Ymx1ZSA7Cn0KCi5jb3JyZWN0IHsKICAgIGJhY2tncm91bmQtY29sb3IgOiBsaWdodGdyZWVuIDsKfQouaW5jb3JyZWN0IHsKICAgIGJhY2tncm91bmQtY29sb3IgOiByZWQgOwp9Cgo="},{"version":3,"sources":["QuestionBox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"QuestionBox.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<div>\n  <b-jumbotron >\n    <template #header></template>\n\n    <template #lead>\n      {{currentQuestion.question}}\n    </template>\n\n    <hr class=\"my-4\">\n\n            <b-list-group>\n            \n                <b-list-group-item v-for=\"(answer,index) in shuffledAnswers\" :key=\"index\" @click=\"selectAnswer(index)\"\n                :class=\" answerClass (index)\">\n                 {{answer}} \n                 \n                </b-list-group-item>\n            </b-list-group>\n    \n\n    <b-button variant=\"primary\" @click ='submitAnswer' :disabled =\"selectedIndex===null || answered\" >\n    Submit</b-button>\n    <b-button @click=\"next\" variant=\"success\" href=\"#\">Next</b-button>\n  </b-jumbotron>\n</div>\n</template>\n\n<script>\nimport _ from 'lodash'\nexport default {\n    props : {\n        currentQuestion : Object,\n        next : Function,\n        increment: Function\n        \n    },\n    \nwatch : {\n    currentQuestion: {\n        immediate: true ,\n        handler () {\n            this.selectedIndex = null\n            this.shuffleAnswers () ;\n            this.answered = false  \n\n        }\n    }\n},\n\n\n\n\n    data () {\n        return {\n            selectedIndex: null,\n            shuffledAnswers : [],\n            answered : false \n        }\n    },\nmethods: {\n    selectAnswer (index) {\n        this.selectedIndex = index\n        \n\n    },\n    answerClass (index) {\n        let answerClass = ''\n\n        if  (!this.answered && this.selectedIndex === index) {\n            answerClass = 'selected'\n        }\n        else if (this.answered && this.correctIndex === index) {\n            answerClass = 'correct' \n        }\n        else if (this.answered && this.selectedIndex === index && this.correctIndex !== index ) {\n            answerClass = 'incorrect'\n        } \n        return answerClass\n    },\n    shuffleAnswers () {\n        let answers = [...this.currentQuestion.incorrect_answers,this.currentQuestion.correct_answer]\n        this.shuffledAnswers = _.shuffle (answers)\n        this.correctIndex = this.shuffledAnswers.indexOf(this.currentQuestion.correct_answer)\n    },\n\n    submitAnswer() {\n      let isCorrect = false\n      if (this.selectedIndex === this.correctIndex ) {\n        isCorrect = true\n      }\n      this.answered = true\n      this.increment(isCorrect)\n    },\n\n},\n\n\n\n    computed: {\n    answers () {\n       let answers = [...this.currentQuestion.incorrect_answers]\n        answers.push (this.currentQuestion.correct_answer)\n        return answers\n       \n     }\n}\n}\n\n\n\n</script>\n\n\n<style scoped>\n.list-group {\n    margin-bottom : 15px;\n}\n.list-group-item:hover {\n    background:  #EEE;\n    cursor : pointer ;\n}\n.btn {\n    margin : 0 5px;\n}\n\n.selected {\n    background-color : lightblue ;\n}\n\n.correct {\n    background-color : lightgreen ;\n}\n.incorrect {\n    background-color : red ;\n}\n\n</style>"]}]}